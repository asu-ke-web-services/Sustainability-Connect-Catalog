<?php

namespace SCCatalog\Http\Controllers{{namespace}};

use SCCatalog\Http\Controllers\Controller;
use SCCatalog\Events{{namespace}}\{{modelName}}CreatedEvent;
use SCCatalog\Events{{namespace}}\{{modelName}}UpdatedEvent;
use SCCatalog\Events{{namespace}}\{{modelName}}DeletedEvent;
use SCCatalog\Http\Requests{{namespace}}\{{modelName}}Request;
use SCCatalog\Repositories{{namespace}}\{{modelName}}Repository;

/**
 * Class {{modelName}}Controller.
 */
class {{modelName}}Controller extends Controller
{
    /**
     * @var {{modelName}}Repository
     */
    private $repository;

    /**
     * {{modelName}}Controller constructor.
     *
     * @param {{modelName}}Repository $repository
     */
    public function __construct({{modelName}}Repository $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Display a listing of the {{modelName}}.
     *
     * @param Manage{{modelName}}Request $request
     *
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(View{{modelName}}Request $request)
    {
        return view('{{modelNameSingularLowerCase}}.index')
            ->with{{modelNamePlural}}($this->repository->paginate(25));
    }

    /**
     * Show the form for creating a new {{modelName}}.
     *
     * @param Manage{{modelName}}Request $request
     *
     * @return \Illuminate\View\View
     */
    public function create(Manage{{modelName}}Request $request)
    {
        return view('{{modelNameSingularLowerCase}}.create');
    }

    /**
     * Store a newly created {{modelName}} in storage.
     *
     * @param {{modelName}}Request $request
     *
     * @return \Illuminate\View\View
     * @throws \Throwable
     */
    public function store({{modelName}}Request $request)
    {
        $this->repository->create($request->only(
            'field1',
            'field2',
        ));

        event(new {{modelName}}CreatedEvent(${{modelNameSingularLowerCase}}));

        return redirect()->route('{{modelNameSingularLowerCase}}.index')
            ->withFlashSuccess(__('{{modelName}} created successfully'));
    }

    /**
     * Display the specified {{modelName}}.
     *
     * @param Manage{{modelName}}Request $request
     * @param {{modelName}}            $user
     *
     * @return \Illuminate\View\View
     */
    public function show(Manage{{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCase}})
    {
        return view('{{modelNameSingularLowerCase}}.show')
            ->with{{modelNamePlural}}(${{modelNameSingularLowerCase}});
    }

    /**
     * Show the form for editing the specified {{modelName}}.
     *
     * @param  int $id
     *
     * @return \Illuminate\View\View
     */
    public function edit(Manage{{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCase}})
    {
        return view('{{modelNameSingularLowerCase}}.edit')
            ->with{{modelName}}(${{modelNameSingularLowerCase}});
    }

    /**
     * Update the specified {{modelName}} in storage.
     *
     * @param  int                 $id
     * @param {{modelName}}Request $request
     *
     * @return \Illuminate\View\View
     */
    public function update({{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCase}})
    {
        ${{modelNameSingularLowerCase}} = $this->repository->updateById(${{modelNameSingularLowerCase}}->id, $request->only(
            'field1',
            'field2'
        ));

        event(new {{modelName}}UpdatedEvent(${{modelNameSingularLowerCase}}));

        return redirect()->route('{{modelNameSingularLowerCase}}.index')
            ->withFlashSuccess(__('{{modelName}} updated successfully'));
    }

    /**
     * Remove the specified {{modelName}} from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\View\View
     */
    public function destroy(Manage{{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCase}})
    {
        $this->repository->deleteById(${{modelNameSingularLowerCase}}->id);
        return redirect()->route('{{modelNameSingularLowerCase}}.index')
            ->withFlashSuccess('{{modelName}} deleted successfully');


        ${{modelNameSingularLowerCase}} = $this->repository->getById($id);
        $this->repository->deleteById($id);

        event(new {{modelName}}DeletedEvent(${{modelNameSingularLowerCase}}));

        return redirect()->route('{{modelNameSingularLowerCase}}.index')
            ->withFlashSuccess('{{modelName}} deleted successfully');
    }
}
